import datetime
import os
import json
from typing import Any, Dict, Union
from PyCookieCloud import PyCookieCloud
from dotenv import load_dotenv
from util import Logger,cc_check_cookies_file

def _to_unix_seconds(val) -> int:
    if val is None:
        return 0
    try:
        v = int(float(val))
        if v > 10**12:
            v = v // 1000
        return v
    except Exception:
        try:
            dt = datetime.datetime.fromisoformat(str(val))
            return int(dt.timestamp())
        except Exception:
            return 0


def _clean(s) -> str:
    if s is None:
        return ""
    return str(s).replace("\t", " ").replace("\r", " ").replace("\n", " ")


def cookie_to_line(c: Dict[str, Any]) -> str:
    domain = c.get("domain") or ""
    host_only = c.get("hostOnly", True)
    include_subdomains = "FALSE" if host_only else "TRUE"
    path = c.get("path", "/")
    secure = "TRUE" if c.get("secure") else "FALSE"
    expiry = _to_unix_seconds(c.get("expirationDate"))
    name = c.get("name") or ""
    value = c.get("value") or ""
    return "\t".join([
        _clean(domain),
        include_subdomains,
        _clean(path),
        secure,
        str(expiry),
        _clean(name),
        _clean(value)
    ])


def write_netscape_cookiefile(decrypted: Union[str, Dict[str, Any]], out_path: str):
    if isinstance(decrypted, str):
        decrypted = json.loads(decrypted)
    if not isinstance(decrypted, dict):
        raise ValueError("expected dict keyed by domain")

    header = [
        "# Netscape HTTP Cookie File",
        "# This file was generated by script",
        "# Fields: domain\\tinclude_subdomains\\tpath\\tsecure\\texpiry\\tname\\tvalue",
        ""
    ]
    lines = header[:]
    count = 0
    for domain, cookies in decrypted.items():
        if not isinstance(cookies, list):
            continue
        for c in cookies:
            if not c.get("name"):
                continue
            lines.append(cookie_to_line(c))
            count += 1

    with open(out_path, "w", encoding="utf-8", newline="\n") as f:
        f.write("\n".join(lines) + "\n")
    print(f"Wrote {count} cookies to {out_path}")


class CookieCloud:
    
    def __init__(self, url:str,uuid:str,key:str):
        """初始化

        Args:
            url (str): 地址
            uuid (str): 用户ID
            key (str): 端对端加密密码
        """        
        self.url = url
        self.uuid = url
        self.key = url
        self.cookie_cloud = PyCookieCloud(
            url,uuid, key)
            
            
    def get_the_key(self):
        """获取the_key"""
        the_key = self.cookie_cloud.get_the_key()
        if not the_key:
            print('Failed to get the key')
            return
        else:
            return the_key
    
    def get_encrypted_data(self, arg):
        """获取加密数据"""        
        encrypted_data  = self.cookie_cloud.get_the_key()
        if not encrypted_data :
            return
        return encrypted_data
    
    def get_decrypted_data(self):
        """获取解密数据"""
        decrypted_data = self.cookie_cloud.get_decrypted_data()
        return decrypted_data
    
    def to_netscape_file(self,  filename:str):
        """将域名相关的cookie转为netscape格式的文件"""
        try:
            decrypted_data = self.get_decrypted_data()
            if decrypted_data:
                write_netscape_cookiefile(self.get_decrypted_data(),filename)
                return True
            else:
                return False
        except:
            return False


def initCookieCloud(
        cookiecloud_url: str,
        cookiecloud_uuid, 
        cookiecloud_key, 
        cookies_file: str,
        expire_minutes: str
    ):
    """初始化cookiecloud

    Args:
        cookiecloud_url (str): cookiecloud访问地址
        cookiecloud_uuid (_type_): 用户唯一ID
        cookiecloud_key (_type_): 端对端加密密码
        cookies_file (str): cookie文件名
    """    
    if cookiecloud_url == 'URL':
        # 默认值 直接返回
        return
    # cookiecloud对象
    cookieCloud = CookieCloud(cookiecloud_url,cookiecloud_uuid,cookiecloud_key)
    # todo 如果当前目录已存在cookies文件且cookiecloud服务可用 检验是否过期 如果过期则通过cookiecloud调用 
    Logger.info("正在检测cookiecloud 网络连接...")
    if cookieCloud.cookie_cloud.check_connection():
        Logger.success("Cookiecloud 连接正常 ✅")
        # 转为netscape格式的文件
        
        # 检测是否需要更新
        if cc_check_cookies_file(cookies_file, expire_minutes):
            return cookieCloud.to_netscape_file(cookies_file)
        return True
    else:
        Logger.warning("cookiecloud服务不可用 ❌")
        return False


def refreshCookie(
    cookiecloud_url: str,
    cookiecloud_uuid,
    cookiecloud_key,
    cookies_file: str
):
    """刷新cookie

    Args:
        cookiecloud_url (str): cookiecloud访问地址
        cookiecloud_uuid (_type_): 用户唯一ID
        cookiecloud_key (_type_): 端对端加密密码
        cookies_file (str): cookie文件名
    """
    # cookiecloud对象
    cookieCloud = CookieCloud(
        cookiecloud_url, cookiecloud_uuid, cookiecloud_key)
    # 转为netscape格式的文件
    return cookieCloud.to_netscape_file(cookies_file)
    
if __name__=='__main__':
    # 测试
    load_dotenv('.env')
    initCookieCloud(
        os.getenv('COOKIE_CLOUD_URL'),
        os.getenv('COOKIE_CLOUD_UUID'), 
        os.getenv('COOKIE_CLOUD_KEY'), 
        os.getenv('COOKIES_FILE')
    )